<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="1905px" preserveAspectRatio="none" style="width:783px;height:1905px;background:#FFFFFF;" version="1.1" viewBox="0 0 783 1905" width="783px" zoomAndPan="magnify"><defs/><g><!--MD5=[3fee75583bb7a64f68d843a3c9534ab3]
class Node--><g id="elem_Node"><rect codeLine="1" fill="#F1F1F1" height="493.739" id="Node" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="369" x="203.79" y="1405"/><ellipse cx="366.54" cy="1421" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M369.5087,1426.6406 Q368.9306,1426.9375 368.29,1427.0859 Q367.6494,1427.2344 366.9462,1427.2344 Q364.4462,1427.2344 363.1259,1425.5859 Q361.8056,1423.9375 361.8056,1420.8125 Q361.8056,1417.6875 363.1259,1416.0313 Q364.4462,1414.375 366.9462,1414.375 Q367.6494,1414.375 368.2978,1414.5313 Q368.9462,1414.6875 369.5087,1414.9844 L369.5087,1417.7031 Q368.8837,1417.125 368.29,1416.8516 Q367.6962,1416.5781 367.0712,1416.5781 Q365.7275,1416.5781 365.04,1417.6484 Q364.3525,1418.7188 364.3525,1420.8125 Q364.3525,1422.9063 365.04,1423.9766 Q365.7275,1425.0469 367.0712,1425.0469 Q367.6962,1425.0469 368.29,1424.7734 Q368.8837,1424.5 369.5087,1423.9219 L369.5087,1426.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="35" x="387.04" y="1427.1006">Node</text><line style="stroke:#181818;stroke-width:0.5;" x1="204.79" x2="571.79" y1="1437" y2="1437"/><polygon fill="none" points="214.79,1447.6304,218.79,1451.6304,214.79,1455.6304,210.79,1451.6304" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="223.79" y="1457.2311">m_Count:int</text><polygon fill="none" points="214.79,1467.8913,218.79,1471.8913,214.79,1475.8913,210.79,1471.8913" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="223.79" y="1477.4919">nodeType:int</text><polygon fill="none" points="214.79,1488.1522,218.79,1492.1522,214.79,1496.1522,210.79,1492.1522" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="223.79" y="1497.7528">m_Father:Node*</text><polygon fill="none" points="214.79,1508.413,218.79,1512.413,214.79,1516.413,210.79,1512.413" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="223.79" y="1518.0137">m_KeyValues:vector&lt;T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="204.79" x2="571.79" y1="1526.0435" y2="1526.0435"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="211.79" y="1538.6739"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="343" x="223.79" y="1546.2745">serialize(Archive&amp; ar, const unsigned int version):void</text><ellipse cx="214.79" cy="1561.9348" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="47" x="223.79" y="1566.5354">Node();</text><ellipse cx="214.79" cy="1582.1956" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="61" x="223.79" y="1586.7963">~Node(){}</text><ellipse cx="214.79" cy="1602.4565" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="94" x="223.79" y="1607.0571">GetCount():int</text><ellipse cx="214.79" cy="1622.7173" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="223.79" y="1627.318">SetCount(int i):void</text><ellipse cx="214.79" cy="1642.9782" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="223.79" y="1647.5789">GetFather():Node*</text><ellipse cx="214.79" cy="1663.2391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="191" x="223.79" y="1667.8397">SetFather(Node* father):void</text><ellipse cx="214.79" cy="1683.4999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="122" x="223.79" y="1688.1006">GetNodeType():int</text><ellipse cx="214.79" cy="1703.7608" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="223.79" y="1708.3615">SetNodeType(int i):void</text><ellipse cx="214.79" cy="1724.0217" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="223.79" y="1728.6223">GetKeyValue(int i):T</text><ellipse cx="214.79" cy="1744.2825" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="223.79" y="1748.8832">SetKeyValue(int i, T key):void</text><ellipse cx="214.79" cy="1764.5434" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="217" x="223.79" y="1769.144">ReplaceKeyValue(int i, T key):void</text><ellipse cx="214.79" cy="1784.8043" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="303" x="223.79" y="1789.4049">GetBro(int&amp; leftOrRight, int ORDER):Node&lt;T&gt;*</text><ellipse cx="214.79" cy="1805.0651" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="223.79" y="1809.6658">SetChild(int i, Node* pointer):void</text><ellipse cx="214.79" cy="1825.326" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="223.79" y="1829.9266">GetChild(int i):Node&lt;T&gt;*</text><ellipse cx="214.79" cy="1845.5869" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="161" x="223.79" y="1850.1875">GetRightBro():Node&lt;T&gt;*</text><ellipse cx="214.79" cy="1865.8477" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="223.79" y="1870.4484">GetLeftBro():Node&lt;T&gt;*</text><ellipse cx="214.79" cy="1886.1086" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="223.79" y="1890.7092">GetValues(int i):T</text></g><!--MD5=[d6a8e8e7ec73b9d40b860dcdb4144eea]
class InterNode--><g id="elem_InterNode"><rect codeLine="26" fill="#F1F1F1" height="270.8695" id="InterNode" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="550" x="181.29" y="7"/><ellipse cx="419.04" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M422.0087,28.6406 Q421.4306,28.9375 420.79,29.0859 Q420.1494,29.2344 419.4462,29.2344 Q416.9462,29.2344 415.6259,27.5859 Q414.3056,25.9375 414.3056,22.8125 Q414.3056,19.6875 415.6259,18.0313 Q416.9462,16.375 419.4462,16.375 Q420.1494,16.375 420.7978,16.5313 Q421.4462,16.6875 422.0087,16.9844 L422.0087,19.7031 Q421.3837,19.125 420.79,18.8516 Q420.1962,18.5781 419.5712,18.5781 Q418.2275,18.5781 417.54,19.6484 Q416.8525,20.7188 416.8525,22.8125 Q416.8525,24.9063 417.54,25.9766 Q418.2275,27.0469 419.5712,27.0469 Q420.1962,27.0469 420.79,26.7734 Q421.3837,26.5 422.0087,25.9219 L422.0087,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="66" x="439.54" y="29.1006">InterNode</text><line style="stroke:#181818;stroke-width:0.5;" x1="182.29" x2="730.29" y1="39" y2="39"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="189.29" y="51.6304"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="146" x="201.29" y="59.2311">m_Childs:&lt;Node&lt;T&gt;*&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="182.29" x2="730.29" y1="67.2609" y2="67.2609"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="189.29" y="79.8913"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="343" x="201.29" y="87.4919">serialize(Archive&amp; ar, const unsigned int version):void</text><ellipse cx="192.29" cy="103.1522" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="87" x="201.29" y="107.7528">InterNode() {}</text><ellipse cx="192.29" cy="123.413" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="201.29" y="128.0137">~InterNode() {}</text><ellipse cx="192.29" cy="143.6739" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="201.29" y="148.2745">GetChild(int i):Node&lt;T&gt;*</text><ellipse cx="192.29" cy="163.9348" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="247" x="201.29" y="168.5354">Insert(T value, Node&lt;T&gt;* pNode):bool</text><ellipse cx="192.29" cy="184.1956" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="246" x="201.29" y="188.7963">SetChild(int i, Node&lt;T&gt;* pointer):void</text><ellipse cx="192.29" cy="204.4565" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="524" x="201.29" y="209.0571">Split(InterNode&lt;T&gt;* parentNode, T key, int MAX_KEYNUM, int ORDER,int&amp; flag):T</text><ellipse cx="192.29" cy="224.7173" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="117" x="201.29" y="229.318">Delete(T key):void</text><ellipse cx="192.29" cy="244.9782" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="201.29" y="249.5789">Combine(Node&lt;T&gt;* pNode):void</text><ellipse cx="192.29" cy="265.2391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="289" x="201.29" y="269.8397">BorrowInterBro(InterNode&lt;T&gt;* pNode):bool</text></g><!--MD5=[66148af4ccdef8153c55d160aebad70b]
class LeafNode--><g id="elem_LeafNode"><rect codeLine="40" fill="#F1F1F1" height="372.1738" id="LeafNode" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="369" x="203.79" y="973"/><ellipse cx="352.04" cy="989" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M355.0087,994.6406 Q354.4306,994.9375 353.79,995.0859 Q353.1494,995.2344 352.4462,995.2344 Q349.9462,995.2344 348.6259,993.5859 Q347.3056,991.9375 347.3056,988.8125 Q347.3056,985.6875 348.6259,984.0313 Q349.9462,982.375 352.4462,982.375 Q353.1494,982.375 353.7978,982.5313 Q354.4462,982.6875 355.0087,982.9844 L355.0087,985.7031 Q354.3837,985.125 353.79,984.8516 Q353.1962,984.5781 352.5712,984.5781 Q351.2275,984.5781 350.54,985.6484 Q349.8525,986.7188 349.8525,988.8125 Q349.8525,990.9063 350.54,991.9766 Q351.2275,993.0469 352.5712,993.0469 Q353.1962,993.0469 353.79,992.7734 Q354.3837,992.5 355.0087,991.9219 L355.0087,994.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="64" x="372.54" y="995.1006">LeafNode</text><line style="stroke:#181818;stroke-width:0.5;" x1="204.79" x2="571.79" y1="1005" y2="1005"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="211.79" y="1017.6304"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="178" x="223.79" y="1025.2311">m_RightBro:LeafNode&lt;T&gt;*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="211.79" y="1037.8913"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="223.79" y="1045.4919">m_LeftBro:LeafNode&lt;T&gt;*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="211.79" y="1058.1522"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="223.79" y="1065.7528">m_Values:vector&lt;uint64_t&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="204.79" x2="571.79" y1="1073.7826" y2="1073.7826"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="211.79" y="1086.413"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="343" x="223.79" y="1094.0137">serialize(Archive&amp; ar, const unsigned int version):void</text><ellipse cx="214.79" cy="1109.6739" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="223.79" y="1114.2745">LeafNode()</text><ellipse cx="214.79" cy="1129.9348" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="223.79" y="1134.5354">~LeafNode()</text><ellipse cx="214.79" cy="1150.1956" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="190" x="223.79" y="1154.7963">GetRightBro():LeafNode&lt;T&gt;*</text><ellipse cx="214.79" cy="1170.4565" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="223.79" y="1175.0571">SetRightBro(LeafNode&lt;T&gt;* rightBro):void</text><ellipse cx="214.79" cy="1190.7173" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="182" x="223.79" y="1195.318">GetLeftBro():LeafNode&lt;T&gt;*</text><ellipse cx="214.79" cy="1210.9782" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="257" x="223.79" y="1215.5789">SetLeftBro(LeafNode&lt;T&gt;* leftBro):void</text><ellipse cx="214.79" cy="1231.2391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="223.79" y="1235.8397">GetValues(int i):T</text><ellipse cx="214.79" cy="1251.4999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="183" x="223.79" y="1256.1006">SetValues(int i, T value):void</text><ellipse cx="214.79" cy="1271.7608" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="223.79" y="1276.3615">Insert(T key, uint64_t):bool</text><ellipse cx="214.79" cy="1292.0217" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="223.79" y="1296.6223">Delete(T value):bool</text><ellipse cx="214.79" cy="1312.2825" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="223.79" y="1316.8832">Combine(Node&lt;T&gt;* pNode):void</text><ellipse cx="214.79" cy="1332.5434" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="223.79" y="1337.144">Split(LeafNode&lt;T&gt;* pNode):T</text></g><!--MD5=[8eac7a77b34bebb45bb5a932e15e2fa1]
class BPlusTree--><g id="elem_BPlusTree"><rect codeLine="59" fill="#F1F1F1" height="574.7825" id="BPlusTree" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="640" x="136.29" y="338"/><ellipse cx="419.04" cy="354" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M422.0087,359.6406 Q421.4306,359.9375 420.79,360.0859 Q420.1494,360.2344 419.4462,360.2344 Q416.9462,360.2344 415.6259,358.5859 Q414.3056,356.9375 414.3056,353.8125 Q414.3056,350.6875 415.6259,349.0313 Q416.9462,347.375 419.4462,347.375 Q420.1494,347.375 420.7978,347.5313 Q421.4462,347.6875 422.0087,347.9844 L422.0087,350.7031 Q421.3837,350.125 420.79,349.8516 Q420.1962,349.5781 419.5712,349.5781 Q418.2275,349.5781 417.54,350.6484 Q416.8525,351.7188 416.8525,353.8125 Q416.8525,355.9063 417.54,356.9766 Q418.2275,358.0469 419.5712,358.0469 Q420.1962,358.0469 420.79,357.7734 Q421.3837,357.5 422.0087,356.9219 L422.0087,359.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="66" x="439.54" y="360.1006">BPlusTree</text><line style="stroke:#181818;stroke-width:0.5;" x1="137.29" x2="775.29" y1="370" y2="370"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="144.29" y="382.6304"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="197" x="156.29" y="390.2311">m_LeafHead:LeafNode&lt;foo&gt;*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="144.29" y="402.8913"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="187" x="156.29" y="410.4919">m_LeafTail:LeafNode&lt;foo&gt;*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="144.29" y="423.1522"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="156.29" y="430.7528">m_Root:Node&lt;foo&gt;*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="144.29" y="443.413"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="156.29" y="451.0137">MAX_KEYNUM:int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="144.29" y="463.6739"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="156.29" y="471.2745">ORDER:int</text><line style="stroke:#181818;stroke-width:0.5;" x1="137.29" x2="775.29" y1="479.3043" y2="479.3043"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="144.29" y="491.9348"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="343" x="156.29" y="499.5354">serialize(Archive&amp; ar, const unsigned int version):void</text><ellipse cx="147.29" cy="515.1956" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="156.29" y="519.7963">BPlusTree()</text><ellipse cx="147.29" cy="535.4565" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="156.29" y="540.0571">~BPlusTree()</text><ellipse cx="147.29" cy="555.7173" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="226" x="156.29" y="560.318">Search(foo data, char* sPath):bool</text><ellipse cx="147.29" cy="575.9782" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="279" x="156.29" y="580.5789">SearchLeafNode(foo key):LeafNode&lt;foo&gt;*</text><ellipse cx="147.29" cy="596.2391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="311" x="156.29" y="600.8397">LeafNode&lt;foo&gt;* SearchDelNode(foo key, int&amp; i)</text><ellipse cx="147.29" cy="616.4999" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="227" x="156.29" y="621.1006">Insert(foo key, uint64_t value):bool</text><ellipse cx="147.29" cy="636.7608" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="514" x="156.29" y="641.3615">InsertInterNode(InterNode&lt;foo&gt;* pNode, foo key, Node&lt;foo&gt;* rightChild):bool</text><ellipse cx="147.29" cy="657.0217" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="141" x="156.29" y="661.6223">Delete(foo data):bool</text><ellipse cx="147.29" cy="677.2825" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="343" x="156.29" y="681.8832">DelInterNode(InterNode&lt;foo&gt;* pNode, foo key):bool</text><ellipse cx="147.29" cy="697.5434" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="342" x="156.29" y="702.144">UpdateKey(foo key, Node&lt;foo&gt;* oldNode, int x):void</text><ellipse cx="147.29" cy="717.8043" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="614" x="156.29" y="722.4049">BorrowLeafBro(LeafNode&lt;foo&gt;* oldNode, LeafNode&lt;foo&gt;* pBro, foo key,int leftOrRight):bool</text><ellipse cx="147.29" cy="738.0651" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="156.29" y="742.6658">DeleteAll():void</text><ellipse cx="147.29" cy="758.326" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="262" x="156.29" y="762.9266">LevelTraversal(Node&lt;foo&gt;* pNode):void</text><ellipse cx="147.29" cy="778.5869" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="279" x="156.29" y="783.1875">RangeQuery(foo minKey, foo maxKey):void</text><ellipse cx="147.29" cy="798.8477" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="156.29" y="803.4484">GetRoot():Node&lt;foo&gt;*</text><ellipse cx="147.29" cy="819.1086" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="209" x="156.29" y="823.7092">SetRoot(Node&lt;foo&gt;* root):void</text><ellipse cx="147.29" cy="839.3694" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="156.29" y="843.9701">SetMaxKey(int i):void</text><ellipse cx="147.29" cy="859.6303" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="156.29" y="864.231">GetMaxKey():int</text><ellipse cx="147.29" cy="879.8912" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="156.29" y="884.4918">SetMinKey(int i):void</text><ellipse cx="147.29" cy="900.152" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="156.29" y="904.7527">GetMinKey():int</text></g><!--MD5=[9562d5affdde7b4799be293558a19c4d]
link LeafNode to BPlusTree--><g id="link_LeafNode_BPlusTree"><path codeLine="88" d="M424.89,972.96 C427.05,957.79 429.2,942.22 431.31,926.5 " fill="none" id="LeafNode-to-BPlusTree" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="433.06,913.25,428.3037,918.6701,431.4775,925.1452,436.2338,919.7251,433.06,913.25" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4f0b26e27e74a84536887e354def1aa7]
link BPlusTree to LeafNode--><g id="link_BPlusTree_LeafNode"><path codeLine="93" d="M406.89,913.25 C404.58,931.74 402.38,950.09 400.32,967.94 " fill="none" id="BPlusTree-to-LeafNode" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="399.75,972.96,404.7516,964.4756,400.321,967.9927,396.8039,963.5621,399.75,972.96" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[011a3b07a6761920014b942bc90cd2ad]
link InterNode to BPlusTree--><g id="link_InterNode_BPlusTree"><path codeLine="89" d="M444.71,278.12 C444.36,293 444.08,308.55 443.89,324.47 " fill="none" id="InterNode-to-BPlusTree" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="443.75,337.92,447.8157,331.9643,443.8819,325.9207,439.8162,331.8764,443.75,337.92" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[3ba1bea75243752fc28c0ebf3b985657]
link BPlusTree to InterNode--><g id="link_BPlusTree_InterNode"><path codeLine="92" d="M469.56,337.92 C469.38,319.24 469.09,300.94 468.68,283.51 " fill="none" id="BPlusTree-to-InterNode" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="468.55,278.12,464.7827,287.2198,468.6785,283.1183,472.78,287.0142,468.55,278.12" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[fd3d68bdf75cd481909d4b175d6103d5]
link LeafNode to Node--><g id="link_LeafNode_Node"><path codeLine="90" d="M388.29,1345.28 C388.29,1358.18 388.29,1371.31 388.29,1384.53 " fill="none" id="LeafNode-to-Node" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="395.29,1384.64,388.29,1404.64,381.29,1384.64,395.29,1384.64" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f9f138526a9c2f2e3a4cd0de7b0bd139]
link InterNode to Node--><g id="link_InterNode_Node"><path codeLine="91" d="M180.92,265 C156.15,285.96 134.39,310.16 118.29,338 C6,532.16 105.22,1135.87 186.29,1345 C191.69,1358.93 197.79,1372.87 204.43,1386.72 " fill="none" id="InterNode-to-Node" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="210.81,1383.82,213.45,1404.85,198.28,1390.06,210.81,1383.82" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ec017b38091437927bc3e2711797944a]
link BPlusTree to Node--><g id="link_BPlusTree_Node"><path codeLine="94" d="M576.37,913.44 C581.87,933.37 586.62,953.35 590.29,973 C620.62,1135.53 637.84,1186.65 590.29,1345 C584.72,1363.55 577.62,1382.01 569.43,1400.14 " fill="none" id="BPlusTree-to-Node" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="567.33,1404.74,574.7034,1398.2106,569.4044,1400.1906,567.4244,1394.8916,567.33,1404.74" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[90877776796b35a913bf023cb9b53341]
@startuml BPlusTree Class Diagram
class Node {
  -serialize(Archive& ar, const unsigned int version):void
  #m_Count:int
  #nodeType:int
  #m_Father:Node*             
  #m_KeyValues:vector<T>  
  +Node();
  +~Node(){}  
  +GetCount():int 
  +SetCount(int i):void 
  +GetFather():Node* 
  +SetFather(Node* father):void 
  +GetNodeType():int 
  +SetNodeType(int i):void
  +GetKeyValue(int i):T
  +SetKeyValue(int i, T key):void
  +ReplaceKeyValue(int i, T key):void
  +GetBro(int& leftOrRight, int ORDER):Node<T>*
  +SetChild(int i, Node* pointer):void
  +GetChild(int i):Node<T>*
  +GetRightBro():Node<T>*
  +GetLeftBro():Node<T>*
  +GetValues(int i):T
}

class InterNode{
  -m_Childs:<Node<T>*>
  -serialize(Archive& ar, const unsigned int version):void
  +InterNode() {}
  +~InterNode() {}
  +GetChild(int i):Node<T>* 
  +Insert(T value, Node<T>* pNode):bool
  +SetChild(int i, Node<T>* pointer):void
  +Split(InterNode<T>* parentNode, T key, int MAX_KEYNUM, int ORDER,int& flag):T
  +Delete(T key):void
  +Combine(Node<T>* pNode):void
  +BorrowInterBro(InterNode<T>* pNode):bool
}

class LeafNode {
  -m_RightBro:LeafNode<T>*         
  -m_LeftBro:LeafNode<T>*          
  -m_Values:vector<uint64_t>
  -serialize(Archive& ar, const unsigned int version):void  
  +LeafNode()
  +~LeafNode()
  +GetRightBro():LeafNode<T>*
  +SetRightBro(LeafNode<T>* rightBro):void 
  +GetLeftBro():LeafNode<T>* 
  +SetLeftBro(LeafNode<T>* leftBro):void 
  +GetValues(int i):T 
  +SetValues(int i, T value):void 
  +Insert(T key, uint64_t):bool 
  +Delete(T value):bool 
  +Combine(Node<T>* pNode):void
  +Split(LeafNode<T>* pNode):T 
}

class BPlusTree{
  -m_LeafHead:LeafNode<foo>*
  -m_LeafTail:LeafNode<foo>*
  -m_Root:Node<foo>*         
  -MAX_KEYNUM:int             
  -ORDER:int 
  -serialize(Archive& ar, const unsigned int version):void                  
  +BPlusTree()
  +~BPlusTree()
  +Search(foo data, char* sPath):bool 
  +SearchLeafNode(foo key):LeafNode<foo>*
  +LeafNode<foo>* SearchDelNode(foo key, int& i)  
  +Insert(foo key, uint64_t value):bool
  +InsertInterNode(InterNode<foo>* pNode, foo key, Node<foo>* rightChild):bool
  +Delete(foo data):bool
  +DelInterNode(InterNode<foo>* pNode, foo key):bool
  +UpdateKey(foo key, Node<foo>* oldNode, int x):void
  +BorrowLeafBro(LeafNode<foo>* oldNode, LeafNode<foo>* pBro, foo key,int leftOrRight):bool
  +DeleteAll():void
  +LevelTraversal(Node<foo>* pNode):void
  +RangeQuery(foo minKey, foo maxKey):void
  +GetRoot():Node<foo>*
  +SetRoot(Node<foo>* root):void
  +SetMaxKey(int i):void
  +GetMaxKey():int
  +SetMinKey(int i):void
  +GetMinKey():int
}

 LeafNode - -* BPlusTree
 InterNode - -* BPlusTree
 LeafNode- -|>Node
 InterNode- -|>Node
 BPlusTree..>InterNode
 BPlusTree..>LeafNode
 BPlusTree..>Node

@enduml

PlantUML version 1.2022.7(Tue Aug 23 01:01:30 CST 2022)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Default Encoding: UTF-8
Language: zh
Country: CN
--></g></svg>